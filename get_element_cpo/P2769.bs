<pre class='metadata'>
Title: get_element customization point object
Shortname: P2769
Level: 3
Status: P
Group: wg21
Default Highlight: cpp
URL: https://wg21.link/P2769R3
Editor: Ruslan Arutyunyan, Intel, ruslan.arutyunyan@intel.com
        Alexey Kukanov, Intel, alexey.kukanov@intel.com
Audience: LEWG
Markup Shorthands: markdown yes
Abstract: This paper introduces a CPO to read elements of tuple like objects, and uses it to define a generic
          <code><i>tuple-like</i></code> concept.
</pre>

<style>
ins, ins * {
    background-color: rgb(200, 250, 200);
    color: rgb(0, 136, 0);
    text-decoration: none;
}

span, span * {
    white-space: pre;
}
</style>

# Motivation # {#motivation}

## Allowing user-defined tuples, or "true" motivation :) ## {#true_motivation}

The section addresses the LEWG feedback. While we always had in mind that with the `get_element`
facility we can make a generic concept for <code><i>tuple-like</i></code> types, we assumed it to be developed as a separate
proposal. However, based on the LEWG poll ([[#lewg_telecon_2024_01_23]]), the `get_element` paper should enable
user-defined tuples to make its motivation strong enough.

So, let's go to the problem statement. Today the C++ standard defines <code><i>tuple-like</i></code> types as only 5 types
from the `std` namespace:
- `std::tuple`
- `std::pair`
- `std::array`
- `std::complex`(since C++26)
- `std::ranges::subrange`

That sounds like a huge limitation for a generic library because, in principle, user-defined types could be treated like
tuples. `std::tuple_size` and `std::tuple_element` are already customizable by users. The problematic part is
`std::get` which is not a customization point.

Furthermore, there is already partial support for user-defined tuples in the language. For example the *structured binding*
language feature has special rules for finding a `get` function for an arbitrary type (in a nutshell, either as a
non-static-member-function or by argument-dependent lookup).

Unfortunately, rules are different in different places in the standard today. For example, *has-tuple-element*
exposition-only concept for `elements_view` allows only the 5 <code><i>tuple-like</i></code> types listed above and does not
consider user-defined types.

[[P2165R4]] added constraints for existing APIs (like `std::apply`, `std::tuple_cat`, etc.) to take
<code><i>tuple-like</i></code> and also provides better compatibility between <code><i>tuple-like</i></code> objects
by adding extra APIs, which is great. The unfortunate part of the story, however, is that the mentioned APIs are still
limited by the definition of the <code><i>tuple-like</i></code> concept (the 5 standard types).

In this paper, we proposed a new customization point object, `get_element`, which can be used to extend the tuple protocol
to user-defined types. Since this facility uses argument-dependent lookup for `get`, using it to redefine
<code><i>tuple-like</i></code> should not be a breaking change for the vast majority of the code.
See the example in [[#breaking_code]] section for more details.

For the following (simplified) code snippet:

```cpp
namespace user {

template <typename T, typename U>
struct my_tuple_like
{
public:
    my_tuple_like(T tt, U uu) : t(tt), u(uu) {}
private:
    T t;
    U u;

    template <std::size_t I>
    friend auto get(my_tuple_like<T, U> t_like)
    {
        static_assert (I == 0 || I == 1);
        if constexpr (I == 0)
            return t_like.t;
        else if constexpr (I == 1)
            return t_like.u;
    }
};

} // namespace user

namespace std {

template <typename T, typename U>
struct tuple_size<user::my_tuple_like<T, U>> : std::integral_constant<std::size_t, 2> {};

template <typename T, typename U>
struct tuple_element<0, user::my_tuple_like<T, U>> {
    using type = T;
};

template <typename T, typename U>
struct tuple_element<1, user::my_tuple_like<T, U>> {
    using type = U;
};

} // namespace std
```

please see the Before-After table

<table>
    <tr>
        <th>Before</th>
        <th>After</th>
    </tr>
    <tr>
        <td>
            <pre>
                auto [x, y] = user::my_tuple_like{3,3};

                // This code does not compile
                // std::apply([](auto x, auto y) {
                //     return x + y;
                // }, user::my_tuple_like{3,3});
            </pre>
        </td>
        <td>
            <pre>
                auto [x, y] = user::my_tuple_like{3,3};

                // Works fine, assuming that std::apply uses std::get_element
                std::apply([](auto x, auto y) {
                    return x + y;
                }, user::my_tuple_like{3,3});
            </pre>
        </td>
    </tr>
</table>

Of course, `std::apply` is just an example. `my_tuple_like` would work with any API that supports
<code><i>tuple-like</i></code> types.

## The original motivating use case ## {#motivating_use_case}

Having `std::pair`, `std::tuple` and other <code><i>tuple-like</i></code> types as the value types for algorithms
creates a plenty of opportunities. With special views, such as `std::ranges::elements_view`, we can
specify which tuple elements to access when iterating over collections of such objects. However,
we cannot easily use a predicate to make a decision based on only some of tuple elements, for example keys or values.

Let's consider the following example:

```cpp
std::vector<std::tuple<int, int>> v{{3,1},{2,4},{1,7}};
std::ranges::sort(v, [](auto x, auto y)
{
    // key-based sorting
    return std::get<0>(x) < std::get<0>(y);
});
```

As we can see, users should spell some extra syntax out to achieve the necessary goal,
comparing to what is described in [[#desired_approach]]. The example above can be considered
simplified; in real practice users might also need to think of e.g. adding references
to lambda parameters to avoid copying.

The code above can be rewritten with *structured binding*:

```cpp
std::vector<std::tuple<int, int>> v{{3,1},{2,4},{1,7}};
std::ranges::sort(v, [](auto x, auto y)
{
    // key-based sorting
    auto [key1, value1] = x;
    auto [key2, value2] = y;
    return key1 < key2;
});
```

Though one could say that it makes code simpler or at least more readable, on the other hand,
its syntax forces the programmer to give names to otherwise unneeded variables, which is often
considered a bad practice.

With [[P2169R3]] the situation with unused variables for structured binding becomes better but
still might require the user to write a quite amount of underscores depending on the use case:

```cpp
std::vector<std::tuple<int, int, int, int>> v{{3,1,1,1},{2,4,4,4},{1,7,7,7}};
std::ranges::sort(v, [](auto x, auto y)
{
    // key-based sorting
    auto [key1, _, _, _] = x;
    auto [key2, _, _, _] = y;
    return key1 < key2;
});
```

### Projections-based alternative ### {#projection_alternative}

Projections provide another option to achieve the same behavior:

```cpp
std::ranges::sort(v, std::less{}, [](auto x)
{
    // key-based sorting
    return std::get<0>(x);
});
```

A variant that properly handles references would use a generic lambda:

```
[](auto&& x) -> auto&&
{
    // key-based sorting
    return std::get<0>(std::forward<decltype(x)>(x));
}
```

While this code achieves the desired result, it requires more syntactic boilerplate
(lambda, forwarding etc.) than the useful code.

### The desired approach ### {#desired_approach}

The nicest way to get what we want would be:
```cpp
// The code that does not work because std::get is not fully instantiated
std::ranges::sort(v, std::less{}, std::get<0>);
```

But it doesn't work because `std::get` is a function template, and one cannot pass function
templates as arguments without instantiating them.

### Why not `std::ranges::views::elements` ### {#not_views_elements}

The necessary result cannot be achieved with `std::ranges::views::elements`, which
would apply the filter for all operations on the input data, including element swap
(for sort algorithm), while we need it to be only be applied for the comparator.

<table>
    <tr>
        <th>std::ranges::views::elements</th>
        <th>Desired behavior</th>
    </tr>

    <tr>
        <td>
            <pre>
                std::vector&lt;std::tuple&lt;int, int>> v{{3,1},{2,4},{1,7}};
                // views::keys is an alias to views::elements
                std::ranges::sort(v | std::ranges::views::keys, [](auto x, auto y)
                {
                    return x < y;
                });

                for (auto& x : v)
                {
                    auto [key, val] = x;
                    std::cout &lt;&lt; "Key = " &lt;&lt; key &lt;&lt; ", Value = " &lt;&lt; val &lt;&lt; std::endl;
                }

                // Output (only keys are sorted):
                // Key = 1, Value = 1
                // Key = 2, Value = 4
                // Key = 3, Value = 7
            </pre>
        </td>
        <td>
            <pre>
                std::vector&lt;std::tuple&lt;int, int>> v{{3,1},{2,4},{1,7}};

                std::ranges::sort(v, [](auto x, auto y)
                {
                    return std::get<0>(x) &lt; std::get<0>(y); // key-based sorting
                });

                for (auto& x : v)
                {
                    auto [key, val] = x;
                    std::cout &lt;&lt; "Key = " &lt;&lt; key &lt;&lt; ", Value = " &lt;&lt; val &lt;&lt; std::endl;
                }

                // Output (values are sorted based on keys):
                // Key = 1, Value = 7
                // Key = 2, Value = 4
                // Key = 3, Value = 1
            </pre>
        </td>
    </tr>
</table>

## Radix sort use case ## {#radix_sort}

Counting-based sorts, and Radix Sort in particular, provide another motivating use case.
Today it is not possible to have a C++ standard conformant implementation that uses
Radix Sort algorithm underneath because the complexity of `std::sort` is defined as
the number of comparator calls, while counting-based sorts do not use a comparator at all.

However, the industry needs Radix Sort for performance reasons. Implementations of C++ standard
parallel algorithms, such as oneAPI Data Parallel C++ Library (oneDPL) and CUDA Thrust, use Radix Sort
conditionally under the hood of `std::sort`, checking data types of the input and the comparator.
In this case, a special comparator is of no help to sort values by keys, and projections seem the only viable option.

That makes the proposed API applicable wider than just with the C++ standard library use cases.

## Other use cases ## {#other_use_cases}

With the `std::ranges::zip_view` appearance in the standard the easy use of projection for <code><i>tuple-like</i></code>
objects might become even more important because its dereferenceable type is exactly <code><i>tuple-like</i></code>.

Another example where it would be convenient to pass `std::get` to a function we discovered in
[a blog article](https://brevzin.github.io/c++/2023/05/23/map-api/) by Barry Revzin.
Let's assume there is a function that returns `std::optional` over a <code><i>tuple-like</i></code> type:

```cpp
auto find(Key const&) const -> optional<pair<Key const, Value> const&>;
```

Now imagine the caller wants to use only one element out of the returned <code><i>tuple-like</i></code> object, or some
default value in case the received `std::optional` is empty. Applying `value_or` directly to the result would require
providing default values for all tuple elements, so it makes sense to convert it first to a single-element optional
with `transform`, and only then get the value with `value_or`:

```cpp
find(key).transform(get<1>).value_or(-1);
```

except, quoting the author, "of course that you can’t just pass `get<1>` like that, so it’s not as easy at it should be."

# Proposed API # {#proposed_api}

We propose the following API:

```cpp
inline namespace /* unspecified */
{
    template <size_t I>
    inline constexpr /* unspecified */ get_element = /* unspecified */;
}
inline constexpr auto get_key = get_element<0>;
inline constexpr auto get_value = get_element<1>;
```

With that API the motivating use case code with the desired behavior would be:

```cpp
std::vector<std::tuple<int, int>> v{{3,1},{2,4},{1,7}};
std::ranges::sort(v, std::less{}, std::get_element<0>);
```

or even

```cpp
std::vector<std::tuple<int, int>> v{{3,1},{2,4},{1,7}};
std::ranges::sort(v, std::less{}, std::get_key);
```

Let's look at comparison tables (a.k.a. Tony Tables):

Comparison of proposed API with comparator-based version

<table>
    <tr>
        <th>Before</th>
        <th>After</th>
    </tr>

    <tr>
        <td>
            <pre>
                std::vector&lt;std::tuple&lt;int, int>> v{{3,1},{2,4},{1,7}};
                std::ranges::sort(v, [](auto x, auto y)
                {
                    return std::get<0>(x) &lt; std::get<0>(y); // key-based sorting
                });
            </pre>
        </td>
        <td>
            <pre>
                std::vector&lt;std::tuple&lt;int, int>> v{{3,1},{2,4},{1,7}};
                std::ranges::sort(v, std::less{}, std::ranges::get_key);
            </pre>
        </td>
    </tr>
</table>

Comparison of proposed API with projections-based version

<table>
    <tr>
        <th>Before</th>
        <th>After</th>
    </tr>
    <tr>
        <td>
            <pre>
                std::vector&lt;std::tuple&lt;int, int>> v{{3,1},{2,4},{1,7}};
                std::ranges::sort(v, std::less{}, [](auto x)
                {
                    return std::get<0>(x); // key-based sorting
                });
            </pre>
        </td>
        <td>
            <pre>
                std::vector&lt;std::tuple&lt;int, int>> v{{3,1},{2,4},{1,7}};
                std::ranges::sort(v, std::less{}, std::ranges::get_key);
            </pre>
        </td>
    </tr>
</table>

## Possible implementation ## {#possible_implementation}

```cpp
namespace std
{
namespace __detail
{
template <std::size_t _Ip>
struct __get_element_fn
{
    template <typename _TupleLike> requires requires {
        typename std::tuple_size<std::remove_cvref_t<_TupleLike>>::type;
    }
    auto operator()(_TupleLike&& __tuple_like) const ->
         decltype(auto)
    {
        constexpr bool __get_member_well_formed = requires {
            std::forward<_TupleLike>(__tuple_like).template get<_Ip>();
        };
        if constexpr (__get_member_well_formed)
        {
            return std::forward<_TupleLike>(__tuple_like).template get<_Ip>();
        }
        return get<_Ip>(std::forward<_TupleLike>(__tuple_like));
    }
};
} // namespace __detail

inline namespace __get_element_namespace
{
template <std::size_t _Ip>
inline constexpr __detail::__get_element_fn<_Ip> get_element;
} // inline namespace __get_element_namespace

inline constexpr auto get_key = get_element<0>;
inline constexpr auto get_value = get_element<1>;
} // namespace std
```

## <code><i>tuple-like</i></code> concept ## {#tuple_like_concept}

With the proposed `std::get_element` CPO, the <code><i>tuple-like</i></code> concept can be generalized to cover
wider range of types rather than just the listed standard types.

### <code><i>tuple-like</i></code> concept generalization with `get_element` ### {#tuple_like_with_get_element}

With `get_element` we can define an exposition only helper concept *can-get-tuple-element*
in the following way:

<pre>
// necessary to check if std::tuple_size_v is well-formed before using it
template &lt;typename T>
concept <i>has-tuple-size</i> = // exposition only
    requires {
        typename std::tuple_size&lt;T>::type;
    };

template&lt;class T, std::size_t I>
concept <i>can-get-tuple-element</i> = // exposition only
    <i>has-tuple-size</i>&lt;std::remove_cvref_t&lt;T>> &&
    requires(T&& t) {
        typename std::tuple_element_t&lt;I, std::remove_cvref_t&lt;T>>;
        { std::get_element&lt;I>(std::forward&lt;T>(t)) } ->
            std::convertible_to&lt;const std::tuple_element_t&lt;I, std::remove_cvref_t&lt;T>>&>;
    };
</pre>

Then the <code><i>tuple-like</i></code> concept can use *can-get-tuple-element* and do something like:

<pre>
template &lt;typename T>
concept <i>tuple-like</i> = // exposition only
    <i>has-tuple-size</i>&lt;std::remove_cvref_t&lt;T>> &&
    []&lt;std::size_t... I>(std::index_sequence&lt;I...>) {
        return (... && <i>can-get-tuple-element</i>&lt;T, I>);
    } (std::make_index_sequence&lt;std::tuple_size_v&lt;std::remove_cvref_t&lt;T>>{});

</pre>

# Design considerations # {#design_decisions}

## `std::ranges::get` ## {#ranges_get}

Alternative design was considered to name the proposed API `std::ranges::get`.

Given that we discussed this option several times in C++ committee and it didn't even have a weak support to pursue,
authors think that keeping the detailed information is no more necessary. Please see [[P2769R2]] for more information.

## Breaking code example ## {#breaking_code}

With the proposed API some user code might be broken because `get_element` makes an ADL call underneath.
Consider the following example:

```cpp
namespace my {
    struct type{};

    template <std::size_t I, typename... Args>
    decltype(auto) get(std::tuple<Args...>& t)
    {
        return std::get<I>(t);
    }

}

int main()
{
    std::tuple<my::type> t;

    // In the standard std::apply uses std::get
    // If std::apply would use std::get_element it's compile-time error because ADL call within get_element
    // will find both std::get and my::get, thus it ends up with ambiguity
    std::apply([](auto) { /* do something */ }, t);
}
```

However, such potential break is very unlikely. In particular, there is no user-defined type involved in the `get`
overload in `my` namespace. If such code in `my` namespace was deployed, it's likely to be already broken.
Indeed, while `std::get` is not a customization point, it is often used unqualified (and therefore found by ADL),
such that the code with in `my` namespace already leads to ambiguity.

This potential breaking change could be mitigated by checking in the `get_element` implementation if the function argument type
is one of the four types `std::get` now works with (ignoring `std::complex` supported only since C++26).
The implementation (with pseudo-code) is provided below for the sake of completeness.
However, the authors do not think any preventive measures are required because of the reasons mentioned above,
and therefore do **not** recommend this solution.

```cpp
namespace std
{
namespace __detail
{
template <std::size_t _Ip>
struct __get_element_fn
{
    template <typename _TupleLike>
    auto operator()(_TupleLike&& __tuple_like) const ->
         decltype(auto)
    {
        constexpr bool __get_member_well_formed = requires {
            std::forward<_TupleLike>(__tuple_like).template get<_Ip>();
        };
        // using __type = std::remove_cvref_t<_TupleLike>'
        // if constexpr (__type is std::tuple or std::pair or std::array or
        //                 std::ranges::subrange)
        // {
        //     std::get<_Ip>(std::forward<_TupleLike>(__tuple_like));
        // }
        if constexpr (__get_member_well_formed)
        {
            return std::forward<_TupleLike>(__tuple_like).template get<_Ip>();
        }
        return get<_Ip>(std::forward<_TupleLike>(__tuple_like));
    }
};
} // namespace __detail
} // namespace std
```

## `get_element` for `std::variant` and other non-tuple-like types ## {#get_element_std_variant}

During the discussion in LEWG (St. Louis, 2024) we got a feedback that it's better to constraint `get_element` with
`tuple_size` and possibly `tuple_element`. The idea was to not use it for something that is not
<code><i>tuple-like</i></code>, e.g., `std::variant`.

The current proposal purposefully does not consider `get_element` to be applicable in all the same contexts
where `std::get` is used, for the following reasons:
- `std::get` has overloads that allow to access `tuple` elements by type, while `std::get_element` doesn't.
- It is hard to imagine generic code that works with either <code><i>tuple-like</i></code> or `std::variant`
    because it is always safe to access any element of a <code><i>tuple-like</i></code> object whereas for `std::variant`
    only one alternative is "active" and safe to access. Restricting `get_element` can therefore prevent
    potential UB in generic code.

Moreover, `get_element` could use `tuple_size` to require that the specified element index is within the size
of the given <code><i>tuple-like</i></code> type, not relying on `get` to have such check.

Thus, the recommendation is to constrain `get_element` with `tuple_size`. It should be sufficient without
`tuple_element`; structured binding does the same.

# Connections with other papers # {#other_papers_connections}

## Connection with [[P2547R1]] ## {#p2547_connection}

[[P2547R1]] uses `std::get` as the example and a good candidate to be a customizable function.
Authors plan to ship the customizable functions proposal first and deal with customizing
standard library functions later. That means we should not expect that examples in this paper
automatically would be transformed to customizable functions when it will land.

Moreover, at this time the authors of [[P2547R1]] don't see how to introduce customizable functions
with the same names (e.g. `std::get`) without the ABI break, so they will likely need to choose
different names.

## Connection with [[P2141R1]] ## {#p2141_connection}

[[P2141R1]]'s main goal is allow aggregates being interpreted as <code><i>tuple-like</i></code>. At the same time, it
touches the <code><i>tuple-like</i></code> concept making it as generic as for the types structured binding can work with.
It also adds yet another `std::get` overload that works with any <code><i>tuple-like</i></code> object except those that
are already in the `std::` namespace.

With [[P2141R1]] being adopted `std::get` does the right thing and works with <code><i>tuple-like</i></code> object, so we
may use just `std::get<_Ip>(std::forward<_TupleLike>(__tuple_like))` within the implementation of `std::get_element`
instead of the unqualified `get` call.

Independently of [[P2141R1]] `std::get_element` brings its own value by covering the described motivation use-cases.
Furthermore, in the standard there are already precedences of having two similar things with slightly different
semantics, for example, `std::less` and `std::ranges::less`, where the latter is not even a CPO.

[[P2141R1]] also gives another way to generalize the <code><i>tuple-like</i></code> concept (via structured binding).

# Further discussion # {#further_work}

- Broader implementation experience (should be done before meeting in Poland, 2024)
- Make <code><i>tuple-like</i></code> a public concept
- Consider requiring the index for `get_element` to be within the size of the tuple

# Formal wording # {#wording}

Below, substitute the � character with a number the editor finds appropriate for the table, paragraph, section or sub-section.

## Modify Concept <i>tuple-like</i> <a href="https://eel.is/c++draft/tuple.like">[**tuple.like**] </a> ## {#wording_tuple_like}

<blockquote>
<ins>
<pre>
template&lt;typename T>
concept <i>has-tuple-size</i> =  <i>// exposition only</i>
  requires {
      typename tuple_size&lt;T>::type;
  };

template&lt;class T, size_t I>
concept <i>can-get-tuple-element</i> = <i>// exposition only</i>
  <i>has-tuple-size</i>&lt;remove_cvref_t&lt;T>> &&
  requires(T&& t) {
      typename tuple_element_t&lt;I, remove_cvref_t&lt;T>>;
      { get_element&lt;I>(std::forward&lt;T>(t)) } ->
        convertible_to&lt;const tuple_element_t&lt;I, remove_cvref_t&lt;T>>&>;
  };
</pre>
</ins>
<pre>
template&lt;typename T>
concept <i>tuple-like</i> = <del><i>see-below</i></del> <i>// exposition only</i>
    <ins><i>has-tuple-size</i>&lt;remove_cvref_t&lt;T>> &&</ins>
    <ins>[]&lt;size_t... I>(index_sequence&lt;I...>) {</ins>
        <ins>return (... && <i>can-get-tuple-element</i>&lt;T, I>);</ins>
    <ins>} (make_index_sequence&lt;tuple_size_v&lt;remove_cvref_t&lt;T>>>{});</ins>
</pre>
<del>
A type <code>T</code> models and satisfies the exposition-only concept *tuple-like* if <code>remove_cvref_t&lt;T></code>
is a specialization of <code>array</code>, <code>complex</code>, <code>pair</code>, <code>tuple</code>,
or <code>ranges​::​subrange</code>.
</del>
</blockquote>

## Modify Header <code>&lt;tuple></code> synopsis <a href="https://eel.is/c++draft/tuple.syn">[**tuple.syn**] </a> ## {#wording_tuple_syn}

<blockquote>
[...]
<pre>
// [tuple.helper], tuple helper classes
template &lt;class T>
  constexpr size_t tuple_size_v = tuple_size&lt;T>::value;
</pre>
<ins>
<pre>
inline namespace /* unspecified */ {
    template &lt;size_t I>
    inline constexpr /* unspecified */ get_element = /* unspecified */;
}
inline constexpr auto get_key = get_element&lt;0>;
inline constexpr auto get_value = get_element&lt;1>;
</pre>
</ins>
</blockquote>

## Add the following sections into <a href="http://eel.is/c++draft/tuple">[**tuple**]</a> ## {#wording_tuple_sections}

<blockquote>
[...]<br>
� Element access [tuple.elem]<br>
<ins>
<span>� Customization Point Objects [tuple.cust]
    � <code>get_element</code> [tuple.cust.get_elem]</span>
</ins>
</blockquote>

## Add the following wording into [**tuple.cust.get_elem**] ## {#wording_tuple_get_elem}

<ins>
<blockquote>
The name <code>get_element</code> denotes a customization point object
(<a href="https://eel.is/c++draft/customization.point.object">[<b>customization.point.object</b>])</a>.
Given an integral constant <code>I</code> of type <code>size_t</code> and a subexpression <code>E</code> having type <code>T</code>:

- If <code>typename tuple_size&lt;remove_cvref_t&lt;T>>::type</code> does not denote a valid type,
    <code>get_element&lt;I>(E)</code> is ill-formed.
- Otherwise, if  <code>E.get&lt;I>()</code> is a valid expression, <code>get_element&lt;I>(E)</code>
    is expression equivalent to <code>E.get&lt;I>()</code>
-  Otherwise,  if <code>E</code> has class type and <code>get&lt;I>(E)</code> is a valid expression where the meaning of <code>get</code>
     is established as-if by performing argument-dependent lookup only
     (<a href="https://eel.is/c++draft/basic.lookup.argdep">[<b>basic.lookup.argdep]</b>)</a>,
     <code>get_element&lt;I>(E)</code> is expression equivalent to <code>get&lt;I>(E)</code>
- Otherwise, <code>get_element&lt;I>(E)</code> is ill-formed.

</blockquote>
</ins>

## Add feature test macro to the end of <a href="http://eel.is/c++draft/version.syn">[**version.syn**]</a> ## {#wording_feature_macro}

<ins>
<blockquote>
[...]
<pre highlight="cpp">
 #define __cpp_lib_get_element_customization_point  20����L
  <i>// also in </i>&lt;tuple><i>, </i>&lt;utility><i>, </i>&lt;array><i>, </i>&lt;ranges>
</pre>
[...]
</blockquote>
</ins>

## Modify `tuple` construct <a href="http://eel.is/c++draft/tuple.cnstr">[**tuple.cnstr**]</a> ## {#modify_constructor}

<blockquote>
`template<tuple-like UTuple>`<br>&nbsp;&nbsp;
  `constexpr explicit(see below) tuple(UTuple&& u);`

Let `I` be the pack `0, 1, …, (sizeof...(Types) - 1)`.

*Constraints*:
- `different-from<UTuple, tuple>` ([range.utility.helpers]) is `true`,
- `remove_cvref_t<UTuple>` is not a specialization of `ranges​::​subrange`,
- `sizeof...(Types)` equals `tuple_size_v<remove_cvref_t<UTuple>>`,
- `(is_constructible_v<Types, decltype(get`<span><ins>`_element`</ins></span>`<I>(std​::​forward<UTuple>(u)))> && ...)` is `true`, and
- either `sizeof...(Types)` is not 1, or (when `Types...` expands to `T`) `is_convertible_v<UTuple, T>`
    and `is_constructible_v<T, UTuple>` are both `false`.

Effects: For all *i*, initializes the *i*th element of `*this` with `get`<span><ins>`_element`</ins></span>`<i>(std​::​forward<UTuple>(u)).`

Remarks: The expression inside explicit is equivalent to:
`!(is_convertible_v<decltype(get`<span><ins>`_element`</ins></span>`<I>(std::forward<UTuple>(u))), Types> && ...)`
The constructor is defined as deleted if
`(reference_constructs_from_temporary_v<Types, decltype(get`<span><ins>`_element`</ins></span>
`<I>(std::forward<UTuple>(u)))> || ...)` is `true`.

</blockquote>

## Modify `tuple` assignment <a href="http://eel.is/c++draft/tuple.assign">[**tuple.assign**]</a> ## {#modify_assignment}

<blockquote>
`template <tuple-like UTuple>`<br>&nbsp;&nbsp;
  `constexpr tuple& operator=(UTuple&& u);`

*Constraints*:
- `different-from<UTuple, tuple>` ([range.utility.helpers]) is `true`,
- `remove_cvref_t<UTuple>` is not a specialization of `ranges​::​subrange`,
- `sizeof...(Types)` equals `tuple_size_v<remove_cvref_t<UTuple>>`, and,
- `is_assignable_v<Ti&, decltype(get`<span><ins>`_element`</ins></span>`<i>(std​::​forward<UTuple>(u)))>` is `true` for all *i*.

*Effects*: For all *i*, assigns `get`<span><ins>`_element`</ins></span>`<i>(std​::​forward<UTuple>(u))` to `get`<span><ins>`_element`</ins></span>`<i>(*this)`.

*Returns*: `*this`.

`template<tuple-like UTuple>`<br>&nbsp;&nbsp;
  `constexpr const tuple& operator=(UTuple&& u) const;`

*Constraints*:
- `different-from<UTuple, tuple>` ([range.utility.helpers]) is `true`,
- `remove_cvref_t<UTuple>` is not a specialization of `ranges​::​subrange`,
- `sizeof...(Types)` equals `tuple_size_v<remove_cvref_t<UTuple>>`, and,
- `is_assignable_v<const Ti&, decltype(get`<span><ins>`_element`</ins></span>`<i>(std​::​forward<UTuple>(u)))>` is `true` for all *i*.

*Effects*: For all *i*, assigns `get`<span><ins>`_element`</ins></span>`<i>(std​::​forward<UTuple>(u))` to
`get`<span><ins>`_element`</ins></span>`<i>(*this)`.

*Returns*: `*this`.
</blockquote>

## Modify `tuple_cat` in tuple creation <a href="https://eel.is/c++draft/tuple.creation">[**tuple.creation**]</a> ## {#modify_tuple_cat}

<blockquote>
`template<tuple-like... Tuples>`<br>&nbsp;&nbsp;
  `constexpr tuple<CTypes...> tuple_cat(Tuples&&... tpls);`

Let *n* be `sizeof...(Tuples)`. For every integer `0 <= i < n`:

- Let `Ti` be the ith type in `Tuples`.
- Let `Ui` be `remove_cvref_t<Ti>`.
- Let `tpi` be the *i*th element in the function parameter pack `tpls`.
- Let `Si` be `tuple_size_v<Ui>`.
- Let `Eki` be `tuple_element_t<k, Ui>`.
- Let `eki` be `get`<span><ins>`_element`</ins></span>`<k>(std::forward<Ti>(tpi))`.
- Let `Elemsi` be a pack of the types `E0i,...,ESi−1i`.
- Let `elemsi` be a pack of the expressions `e0i`,...,`eSi−1i`.

The types in `CTypes` are equal to the ordered sequence of the expanded packs of types `Elems0..., Elems1..., ..., Elemsn−1...`.
Let `celems` be the ordered sequence of the expanded packs of expressions `elems0..., ..., elemsn−1...`.

*Mandates*: `(is_constructible_v<CTypes, decltype(celems)> && ...)` is `true`.

*Returns*: `tuple<CTypes...>(celems...)`
</blockquote>

## Modify `apply` in <a href="https://eel.is/c++draft/tuple.apply">[**tuple.apply**]</a> ## {#modify_tuple_apply}

<blockquote>
`template<class F, tuple-like Tuple>`<br>&nbsp;&nbsp;
`constexpr decltype(auto) apply(F&& f, Tuple&& t) noexcept(see below);`

*Effects*: Given the exposition-only function template:
<span>
<pre>
<code>
namespace std {
  template`<class F, tuple-like Tuple, size_t... I>`
  constexpr decltype(auto) apply-impl(F&& f, Tuple&& t, index_sequence`<I...>`) {
                                                                        <i>// exposition only</i>
    return INVOKE(`std::forward<F>(f)`, get<ins>_element</ins>`<I>(std::forward<Tuple>(t))...);`     <i>// see [func.require]</i>
  }
}
</code>
</pre>
</span>
Equivalent to:
<span><pre><code> return apply-impl(std::forward<F>(f), std::forward<Tuple>(t),
                   make_index_sequence`<tuple_size_v<remove_reference_t<Tuple>>>{});`</code></pre></span>

*Remarks*: Let `I` be the pack `0, 1, ..., (tuple_size_v<remove_reference_t<Tuple>> - 1)`. The exception specification is equivalent to:
<pre>
  noexcept(invoke(std::forward&lt;F>(f), get<ins>_element</ins>&lt;I>(std::forward&lt;Tuple>(t))...))</pre>
</blockquote>

<blockquote>
`template<class T, tuple-like Tuple>`
<pre>`  constexpr T make_from_tuple(Tuple&& t);`</pre>

*Mandates*: If `tuple_size_v<remove_reference_t<Tuple>>` is 1, then<br>
&nbsp;&nbsp;`reference_constructs_from_temporary_vT, decltype(get`<span><ins>`_element`</ins></span>`<0>(declval<Tuple>()))>` is `false`.

Effects: Given the exposition-only function template:
<pre>
namespace std {
  template&lt;class T, tuple-like Tuple, size_t... I>
    requires is_constructible_v&lt;T, decltype(get<ins>_element</ins>&lt;I>(declval&lt;Tuple>()))...>
  constexpr T make-from-tuple-impl(Tuple&& t, index_sequence&lt;I...>) {   // exposition only
    return T(get<ins>_element</ins>&lt;I>(std::forward&lt;Tuple>(t))...);
  }
}
</pre>
</blockquote>

## Modify relation operators in <a href="https://eel.is/c++draft/tuple.rel">[**tuple.rel**]</a> ## {#modify_tuple_rel}

<blockquote>
<pre>
template&lt;class... TTypes, class... UTypes>
constexpr bool operator==(const tuple&lt;TTypes...>& t, const tuple&lt;UTypes...>& u);
template&lt;class... TTypes, tuple-like UTuple>
constexpr bool operator==(const tuple&lt;TTypes...>& t, const UTuple& u);
</pre>

For the first overload let `UTuple` be `tuple<UTypes...>`.

*Constraints*: For all `i`, where `0  <= i < sizeof...(TTypes)`, `get<i>(t) == get`<span><ins>`_element`</ins></span>`<i>(u)`
is a valid expression and `decltype(get<i>(t) == get`<span><ins>`_element`</ins></span>`<i>(u))` models boolean-testable. `sizeof...(TTypes)` equals `tuple_size_v<UTuple>`.

*Returns*: `true` if `get<i>(t) == get`<span><ins>`_element`</ins></span>`<i>(u)` for all `i`, otherwise `false`.

[Note 1: If `sizeof...(TTypes)` equals zero, returns `true`. — end note]

*Remarks*:
- The elementary comparisons are performed in order from the zeroth index upwards.
    No comparisons or element accesses are performed after the first equality comparison that evaluates to `false`.
- The second overload is to be found via argument-dependent lookup ([basic.lookup.argdep]) only.

<pre>
template&lt;class... TTypes, class... UTypes>
  constexpr common_comparison_category_t&lt;synth-three-way-result&lt;TTypes, UTypes>...>
    operator&lt;=>(const tuple&lt;TTypes...>& t, const tuple&lt;UTypes...>& u);
template&lt;class... TTypes, tuple-like UTuple>
  constexpr common_comparison_category_t&lt;synth-three-way-result&lt;TTypes, Elems>...>
    operator&lt;=>(const tuple&lt;TTypes...>& t, const UTuple& u);
</pre>

For the second overload, `Elems` denotes the pack of types `tuple_element_t<0, UTuple>, tuple_element_t<1, UTuple>, …, tuple_element_t<tuple_size_v<UTuple> - 1, UTuple>`.

*Effects*: Performs a lexicographical comparison between `t` and `u`. If `sizeof...(TTypes)` equals zero, returns `strong_ordering​::​equal`.

Otherwise, equivalent to: `if (auto c = synth-three-way(get<0>(t), get`<span><ins>`_element`</ins></span>`<0>(u)); c != 0) return c;`
`return ttail <=> utail;`

where `rtail` for some `r` is a tuple containing all but the first element of `r`.

*Remarks*: The second overload is to be found via argument-dependent lookup ([basic.lookup.argdep]) only.
</blockquote>

## Modify <a href="https://eel.is/c++draft/range.elements.iterator">[**range.elements.iterator**]</a> ## {#modify_range_elements_iterator}

<blockquote>
The member *typedef-name* `iterator_category` is defined if and only if *Base* models `forward_range`.
In that case, `iterator_category` is defined as follows: Let `C` denote the type
`iterator_traits<iterator_t<Base>>​::​iterator_category.`
- If `std​::​get`<span><ins>`_element`</ins></span>`<N>(*current_)` is an rvalue, `iterator_category`
    denotes `input_iterator_tag`.
- Otherwise, if C models `derived_from<random_access_iterator_tag>`, `iterator_category` denotes
    `random_access_iterator_tag.`
- Otherwise, `iterator_category` denotes `C`.

`static constexpr decltype(auto) `<i>`get-element`</i>`(const iterator_t<Base>& i);`

*Effects*: Equivalent to:
<pre>
if constexpr (is_reference_v&lt;range_reference_t&lt;Base>>) {
  return std::get<ins>`_element`</ins>&lt;N>(*i);
} else {
  using E = remove_cv_t&lt;tuple_element_t&lt;N, range_reference_t&lt;Base>>>;
  return static_cast&lt;E>(std::get<ins>`_element`</ins>&lt;N>(*i));
}
</pre>
</blockquote>

## Modify `uses_allocator_construction_args` in <a href="https://eel.is/c++draft/allocator.uses.construction">[**allocator.uses.construction**]</a> ## {#allocator_uses_construction}

<blockquote>
<pre>
template&lt;class T, class Alloc, <i>pair-like</i> P>
  constexpr auto uses_allocator_construction_args(const Alloc& alloc, P&& p) noexcept;
</pre>

*Constraints*: `remove_cv_t<T>` is a specialization of `pair` and `remove_cvref_t<P>` is not a specialization of
               `ranges​::​subrange.`

*Effects*: Equivalent to:
<pre>
  return uses_allocator_construction_args&lt;T>(alloc, piecewise_construct,
                                        forward_as_tuple(get<ins>_element</ins>&lt;0>(std::forward&lt;P>(p))),
                                        forward_as_tuple(get<ins>_element</ins>&lt;1>(std::forward&lt;P>(p))));
</pre>
</blockquote>

## Modify `pair` in <a href="https://eel.is/c++draft/pairs.pair">[**pairs.pair**]</a> ## {#pairs_pair}

<blockquote>
<pre>
template&lt;class U1, class U2> constexpr explicit(see below) pair(pair&lt;U1, U2>& p);
template&lt;class U1, class U2> constexpr explicit(see below) pair(const pair&lt;U1, U2>& p);
template&lt;class U1, class U2> constexpr explicit(see below) pair(pair&lt;U1, U2>&& p);
template&lt;class U1, class U2> constexpr explicit(see below) pair(const pair&lt;U1, U2>&& p);
template&lt;<i>pair-like</i> P> constexpr explicit(see below) pair(P&& p);
</pre>

Let <code><i>FWD</i>(u)</code> be `static_cast<decltype(u)>(u)` <ins>and let <code><i>get-elem</i></code>
be `get` for the first four overloads and `get_element` for the last overload.</ins>

*Constraints:*

- For the last overload `remove_cvref_t<P>` is not a specialization of `ranges​::​subrange`
- <code>is_constructible_v&lt;T1, decltype(<ins><i>get-elem</i></ins><0>(<i>FWD</i>(p)))></code> is `true`, and
- <code>is_constructible_v&lt;T2, decltype(<ins><i>get-elem</i></ins><1>(<i>FWD</i>(p)))></code> is `true`.

*Effects*: Initializes first with <code><ins><i>get-elem</i></ins><0>(<i>FWD</i>(p))</code> and second with <code><ins><i>get-elem</i></ins><1>(<i>FWD</i>(p))</code>.

*Remarks*: The expression inside explicit is equivalent to:
<code>!is_convertible_v&lt;decltype(<ins><i>get-elem</i></ins><0>(<i>FWD</i>(p))), T1> ||</code>
<code>!is_convertible_v&lt;decltype(<ins><i>get-elem</i></ins><1>(<i>FWD</i>(p))), T2></code>

The constructor is defined as deleted if

<code>reference_constructs_from_temporary_v&lt;first_type, decltype(<ins><i>get-elem</i></ins><0>(<i>FWD</i>(p)))> ||</code>
<code>reference_constructs_from_temporary_v&lt;second_type, decltype(<ins><i>get-elem</i></ins><1>(<i>FWD</i>(p)))></code>

is `true`.
</blockquote>

<blockquote>

<code>template&lt;<i>pair-like</i> P> constexpr pair& operator=(P&& p);</code>

*Constraints*:
- <code><i>different-from</i>&lt;P, pair></code> ([range.utility.helpers]) is `true`,
- `remove_cvref_t<P>` is not a specialization of `ranges​::​subrange`,
- <code>is_assignable_v&lt;T1&, decltype(get<ins>_element</ins>&lt;0>(std​::​forward&lt;P>(p)))></code> is `true`, and
- <code>is_assignable_v&lt;T2&, decltype(get<ins>_element</ins>&lt;1>(std​::​forward&lt;P>(p)))></code> is `true`.

Effects: Assigns <code>get<ins>_element</ins>&lt;0>(std​::​forward&lt;P>(p))</code> to `first` and <code>get<ins>_element</ins>&lt;1>(std​::​forward&lt;P>(p))</code> to `second`.
Returns: `*this`.

<code>template&lt;<i>pair-like</i> P> constexpr const pair& operator=(P&& p) const;</code>

*Constraints*:
- <code><i>different-from</i>&lt;P, pair></code> ([range.utility.helpers]) is `true`,
- `remove_cvref_t<P>` is not a specialization of `ranges​::​subrange`,
- <code>is_assignable_v&lt;const T1&, decltype(get<ins>_element</ins>&lt;0>(std​::​forward&lt;P>(p)))></code> is `true`, and
- <code>is_assignable_v&lt;const T2&, decltype(get<ins>_element</ins>&lt;1>(std​::​forward&lt;P>(p)))></code> is `true`.

*Effects*: Assigns <code>get<ins>_element</ins>&lt;0>(std​::​forward&lt;P>(p))</code> to `first` and <code>get<ins>_element</ins>&lt;1>(std​::​forward&lt;P>(p))</code> to `second`.
*Returns*: `*this`.
</blockquote>

## Modify "Exposition-only helpers" in <a href="https://eel.is/c++draft/mdspan.sub.helpers">[**mdspan.sub.helpers**]</a> ## {#mdspan_sub_helpers}

<blockquote>
<pre>
template&lt;class T>
  constexpr T <i>de-ice</i>(T val) { return val; }
template&lt;integral-constant-like T>
  constexpr auto <i>de-ice</i>(T) { return T::value; }

template&lt;class IndexType, size_t k, class... SliceSpecifiers>
  constexpr IndexType first_(SliceSpecifiers... slices);
</pre>
*Mandates*: `IndexType` is a signed or unsigned integer type.

Let <i>ϕk</i> denote the following value:
- <i>sk</i> if <i>Sk</i> models `convertible_to<IndexType>;`
- otherwise, <code>get<ins>_element</ins>&lt;0>(<i>sk</i>)</code> if <i>Sk</i> models <code><i>index-pair-like</i>&lt;IndexType></code>;
- otherwise, <code><i>de-ice</i>(<i>sk</i>.offset)</code> if <i>Sk</i> is a specialization of `strided_slice`;
- otherwise, `0`.

Preconditions: <i>ϕk</i> is representable as a value of type `IndexType`.

Returns: <code>extents&lt;IndexType>​::<i>​index-cast(ϕk)</i></code>.

<pre>
template&lt;size_t k, class Extents, class... SliceSpecifiers>
  constexpr auto last_(const Extents& src, SliceSpecifiers... slices);
</pre>
*Mandates*: `Extents` is a specialization of extents.
Let `index_type` be typename `Extents​::​index_type.`
Let <i>λk</i> denote the following value:
- <code><i>de-ice(sk)</i> + 1</code> if <i>Sk</i> models `convertible_to<index_type>;` otherwise
- <code>get<ins>_element</ins>&lt;1>(<i>sk</i>)</code> if <i>Sk</i> models
    <code><i>index-pair-like</i>&lt;index_type></code>; otherwise
- <code><i>de-ice</i>(<i>sk</i>.offset) + <i>de-ice</i>(<i>sk</i>.extent)</code> if <i>Sk</i> is a specialization
    of `strided_slice`; otherwise
- `src.extent(k)`.

Preconditions: <i>λk</i> is representable as a value of type `index_type`.

Returns: <code>Extents​::<i>​index-cast(λk)</i></code>.
</blockquote>

# Revision history # {#revision_history}

## R2 => R3 ## {#r2_r3}

* Remove the details about `std::ranges::get` design alternative
* Align the behavior of `get_element` with *structured binding*
* Add support for value categories for *tuple-like* concept
* Modify <code><i>pair-like</i></code> and <code><i>index-pair-like</i></code> to use `get_element`
* Constrain `get_element` with `tuple_size`

## R1 => R2 ## {#r1_r2}

* Add extra motivation to allow user-defined tuples in the standard
* Propose changes to *tuple-like* concept with wording

## R0 => R1 ## {#r0_r1}

* Address the "structured binding unused variables" questions with [[P2169R3]]
* Add ruminations about possible relaxation of the *tuple-like* concept
* Add connections to [[P2547R1]] and [[P2141R1]]
* Apply an approach to minimize ABI and API breaking for the `std::ranges::get` name
* Add wording and a feature test macro for the `std::get_element` API

# Polls # {#polls}

## SG9 polls, Issaquah 2023 ## {#sg9_issaquah_2023}

**POLL**: The solution proposed in the paper "P2769: `get_element` customization point object" should be renamed to `std::ranges::get`.

<table>
<tr>
    <th>SF</th>
    <th>F</th>
    <th>N</th>
    <th>A</th>
    <th>SA</th>
</tr>
<tr>
    <td>&nbsp;1</td>
    <td>2</td>
    <td>1</td>
    <td>2</td>
    <td>&nbsp;1</td>
</tr>
</table>

**POLL**: The solution proposed in the paper "P2769: `get_element` customization point object" should be moved out of the `ranges` namespace (`std::get_element`).

<table>
<tr>
    <th>SF</th>
    <th>F</th>
    <th>N</th>
    <th>A</th>
    <th>SA</th>
</tr>
<tr>
    <td>&nbsp;2</td>
    <td>4</td>
    <td>0</td>
    <td>1</td>
    <td>&nbsp;0</td>
</tr>
</table>

## Library Evolution Telecon 2024-01-23 ## {#lewg_telecon_2024_01_23}

**POLL**: [[P2769R1]] (`get_element` customization point object) needs to allow for user tuple-likes before it can ship

<table>
<tr>
    <th>SF</th>
    <th>F</th>
    <th>N</th>
    <th>A</th>
    <th>SA</th>
</tr>
<tr>
    <td>&nbsp;3</td>
    <td>3</td>
    <td>4</td>
    <td>2</td>
    <td>&nbsp;0</td>
</tr>
</table>

**POLL**: LEWG should spend more time on [[P2769R1]] (`get_element` customization point object)

<table>
<tr>
    <th>SF</th>
    <th>F</th>
    <th>N</th>
    <th>A</th>
    <th>SA</th>
</tr>
<tr>
    <td>&nbsp;5</td>
    <td>4</td>
    <td>0</td>
    <td>2</td>
    <td>&nbsp;0</td>
</tr>
</table>

## Library Evolution, St. Louis 2024 ## {#polls_lewg_st_louis_2024}

**POLL**: Remove the `get_key` and `get_value` variables.

**Outcome**: Unanimous dissent.

**POLL**: Rename `get_key` and `get_value` to `get_first` and `get_second`, respectively.

**Outcome**: Unanimous dissent.

**POLL**: `get_element` should align with the structured binding protocol by attempting to find member functions named
`get`.

<table>
<tr>
    <th>SF
    <th>F
    <th>N
    <th>A
    <th>SA
</tr>
<tr>
    <td>&nbsp;5
    <td>5
    <td>1
    <td>2
    <td>&nbsp;0
</tr>
</table>

# Acknowledgements # {#acknowledgements}

* Thanks to Casey Carter for providing `adl_hook` trick. See [[P2769R2]] for more details.
* Thanks to Corentin Jabot for continuous contribution that improved `get_element` proposal.
* Thanks to Benjamin Brock for paper review and design discussions.
* Thanks to Mark Hoemmen for confirming wording changes for `submdspan`.
